==============
kodo-visualize
==============

Kodo-visuzalize is a convinient library which contains the tools needed for
making visualizations of the encoding and decoding using kodo.

.. contents:: Table of Contents:
   :local:

Getting Started
===============

First off make sure you have followed the guide for getting started with kodo.

http://kodo-docs.steinwurf.com/en/latest/getting_started.html

When you have completed this, you are ready to install the SDL library on which
the kodo-visual library is based. SDL is a cross-platform multimedia library.
Depending on you system different approaches are needed.

Linux
-----
Use your package manager to install the following (or equivalent) packages::

    sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev

You are now ready to configure the project::

    ./waf configure

Windows
-------
Download SDL2 and SDL2_image - make sure you pick the Development libraries
(and **not** the Runtime ones).
Now unpack the zip files in a folder of your choosing, I picked ``C:\SDL2`` and
``C:\SDL2_image`` respectively.

You are not ready to configure the project by specifying the path to the two
libraries::


    waf configure --sdl2_path=PATH_TO_SDL2 --sdl2_image_path=PATH_TO_SDL2_IMAGE --sdl2_ttf_path=PATH_TO_SDL2_TTF


MacOS
-----
Install pkg-config, libsdl2, and libsdl2_image using macports::

    sudo port pkgconfig
    sudo port libsdl2
    sudo port libsdl2_image
    sudo port libsdl2_ttf

Other package managers may or may not work.

After installing the three packages, you should be able to configure the
project::

    waf configure

Usage
=====
Overall, kodo-visualize consists of a canvas and a set of "viewers". A viewer is
an instance of a class inherieting from the i_renderable interface.
The canvas is where all the viewers print their content.

A viewer is added to the canvas by using the canvas' ``add`` method. Each of the
viewer will write their content to the canvas in the order which they were added
to the canvas.

The kodo library contains many different examples, and it should be fairly
straight forward to integrate kodo-visualize into these.

Encoder State Viewer
--------------------
The ``encoder_state_viewer`` shows the most recent symbols generated by the
encoder. This is setup by calling the ``set_callback`` method with the encoder
to monitor.

Decoder State Viewer
--------------------
The ``decoder_state_viewer`` shows the current state of the decoding matrix.
This is setup by calling the ``set_callback`` method with the decoder to
monitor.

Image Viewer
------------
The ``image_viewer`` is meant to be used in cooperation with the image reader.
Doing so will give a graphical presentation of the decoding.
When using the image viewer, you will get best results if you set the symbol
size to pitch of the image and the number of symbols to the height of the image.
The pitch of the image is the size of a row in the picture in bytes. Both of
these properties are available as members on the image reader.

To show the progress of the decoding, the ``display_decoding`` method should be
called during the decoding process.

Text
----
The ``test_viewer`` shows a text on the screen. A font is needed before text can
be printet. The font can be set using the ``set_font`` method. Note, to set the
font a path to the font file is needed - not just the name.

To File
-------
The ``to_file`` viewer, is not really a viewer. It utilizes the functionality of
the canvas to create ``.bmp`` files of each frame. The generated ``.bmp`` files
can be used by third party applications to create videos of the coding.

Note, the files generated by the ``to_file`` object will only contain the
content of the viewers added to the canvas, prior to the ``to_file`` object.
It's therefore recommended that the ``to_file`` object is added as the last
viewer.


