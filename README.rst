==============
kodo-visualize
==============

Kodo-visuzalize is a convinient library which contains the tools needed for
making visualizations of the encoding and decoding using kodo.

.. contents:: Table of Contents:
   :local:

Building
========

To build kodo-visualize, you need the standard kodo requirements. Additionally
kodo-visualize also requires the SDL library. SDL is a cross-platform multimedia
library which enables writing to the graphics framebuffer.

Linux
-----
Use your package manager to install the following (or equivalent) packages::

    sudo aptitude install git python g++ build-essential libsdl2-dev libsdl2-image-dev

MacOS
-----
Not available.

Windows
-------
Not available.

Usage
=====
Overall, kodo-visualize consists of a canvas and a set of viewers. The canvas is
where all the viewers will print their content.

The kodo library contains many different examples, and it should be fairly
straight forward to integrate kodo-visualize into these.

Encoder State Viewer
--------------------
Shows the most recent symbols generated by the encoder. This is setup by calling
the ``set_callback`` method with the encoder to monitor.

Decoder State Viewer
--------------------
Shows the most recent symbols generated by the encoder. This is setup by calling
the ``set_callback`` method with the decoder to monitor.

Image Viewer
------------
The image viewer is meant to be used in cooperation with the image reader.
Doing so will give a graphical presentation of the decoding.
When using the image viewer, you will get best results if you set the symbol
size to pitch of the image and the number of symbols to the height of the image.
The pitch of the image is the size of a row in the picture in bytes. Both of
these properties are available as members on the image reader.

To show the progress of the decoding, the ``display_decoding`` method should be
called during the decoding process.

